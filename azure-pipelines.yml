trigger:
  - main

parameters:
  - name: ForcePushDockerImage
    displayName: Force push docker image
    type: boolean
    values:
      - true
      - false
    default: false

variables:
  - name: Repository
    value: davidullrich/azurepipelineagent
  - name: IsMainBranch
    value: ${{ eq(variables['Build.SourceBranch'], 'refs/heads/main') }}
  - name: PushDockerImage
    value: ${{ 
        or( 
          eq(variables.IsMainBranch, 'true'),
          parameters.ForcePushDockerImage
        )
      }}

jobs:
- job: BuildAndPublish
  displayName: Build and Publish

  strategy:
    matrix:
      node20:
        NodeVersion: "20"
        Tag: node-$(NodeVersion)
      node21:
        NodeVersion: "21"
        Tag: latest
  
  pool:
    name: "Self-hosted"
  
  container:
    image: davidullrich/azurepipelineagent:latest

  steps:
  - task: DockerInstaller@0
    displayName: Install Docker CLI
    inputs:
      dockerVersion: "24.0.7"

  - task: Docker@2
    displayName: Login
    inputs:
      command: login
      containerRegistry: DockerHubConnection

  - task: CmdLine@2
    displayName: Install buildx
    inputs:
      script: |
        mkdir -p $HOME/.docker/cli-plugins
        cd $HOME/.docker/cli-plugins
        wget -q https://github.com/docker/buildx/releases/download/v0.12.0/buildx-v0.12.0.linux-amd64 -O docker-buildx
        chmod +x ~/.docker/cli-plugins/docker-buildx
  
  - task: CmdLine@2
    displayName: Print environment
    inputs:
      script: |
        echo "Build.BuildId                         $(Build.BuildId)"
        echo "Build.BuildNumber                     $(Build.BuildNumber)"
        echo "Build.Reason                          $(Build.Reason)"
        echo "Build.SourceBranch                    $(Build.SourceBranch)"
        echo "Build.SourceBranchName                $(Build.SourceBranchName)"
        echo "Build.Repository.ID                   $(Build.Repository.ID)"
        echo "Build.Repository.Name                 $(Build.Repository.Name)"
        echo "Build.Repository.LocalPath            $(Build.Repository.LocalPath)"
        echo "Build.Repository.Uri                  $(Build.Repository.Uri)"
        echo "-----------------------------------------------------------------------------"
        echo "parameters.ForcePushDockerImage       ${{ parameters.ForcePushDockerImage }}"
        echo "variables.Repository                  $(Repository)"
        echo "variables.IsMainBranch                $(IsMainBranch)"
        echo "variables.PushDockerImage             $(PushDockerImage)"
        echo "-----------------------------------------------------------------------------"
        echo "docker -v                             $(docker -v)"
        echo "docker buildx version                 $(docker buildx version)"
        echo "git -v                                $(git -v)"
        echo "node -v                               $(node -v)"
        echo "npm -v                                $(npm -v)"

  - task: CmdLine@2
    displayName: Create buildx environment
    inputs:
      script: |
        docker buildx create --use --driver-opt network=host
        docker buildx inspect --bootstrap

  - ${{ if eq(variables.PushDockerImage, 'false') }}:
    - task: CmdLine@2
      displayName: Build Image
      inputs:
        script: |
          docker buildx build \
              -f dockerfile \
              --platform linux/amd64,linux/arm64 \
              --no-cache \
              --build-arg NODE_VERSION=$(NodeVersion) \
              -t $(Repository):$(Tag) .
        workingDirectory: $(Build.SourcesDirectory)

  - ${{ if eq(variables.PushDockerImage, 'true') }}:
    - task: CmdLine@2
      displayName: Build and Push Image
      inputs:
        script: |
          docker buildx build \
              -f dockerfile \
              --platform linux/amd64,linux/arm64 \
              --no-cache \
              --build-arg NODE_VERSION=$(NodeVersion) \
              -t $(Repository):$(Tag) \
              --output=type=registry .
        workingDirectory: $(Build.SourcesDirectory)

  - task: CmdLine@2
    condition: always()
    displayName: Cleanup
    inputs:
      script: |
        docker buildx stop
        docker buildx rm --all-inactive --force

  - task: Docker@2
    condition: always()
    displayName: Logout
    inputs:
      command: logout
      containerRegistry: DockerHubConnection
